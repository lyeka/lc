### 解题思路

执行用时： 0 ms , 在所有 Go 提交中击败了 100.00% 的用户
内存消耗： 5.4 MB , 在所有 Go 提交中击败了 92.46% 的用户

### 代码

* golang

```golang
func minDistance(word1 string, word2 string) int {
    // 其中有一个为空字符串时，可直接返回
    m, n := len(word1), len(word2)
    if m == 0 {
        return n
    }
    if n == 0 {
        return m
    }

    dp := make([][]int, m)

    // 先处理矩阵的第一行和第一列
    found := 0
    for i := 0; i < m; i++ {
        dp[i] = make([]int, n)
        if word1[i] == word2[0] {
            found = 1
        }
        dp[i][0] = i + 1 - found
    }

    found = 0
    for i := 0; i < n; i++ {
        if word1[0] == word2[i] {
            found = 1
        }
        dp[0][i] = i + 1 - found
    }

    // dp
    for i := 1; i < m; i++ {
        for j := 1; j < n; j++ {
            if word1[i] == word2[j] {
                dp[i][j] = dp[i-1][j-1]
            } else {
                dp[i][j] = 1 + min72(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])
            }
        }
    }

    return dp[m-1][n-1]
}

func min72(nums ...int) int {
    min := math.MaxInt32
    for _, v := range nums {
        if min > v {
            min = v
        }
    }
    return min
}

```

