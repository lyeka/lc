### 解题思路

可以采用最大堆的数据结构来保存元素，堆顶元素即为当前堆的最大值，并判断当前堆顶元素这是否在窗口中，
在则直接返回，不在则利用堆特性删除堆顶元素并调整堆
时间复杂度：O(N logN)， n=len(nums)

### 代码

* golang

```golang
import (
    "container/heap"
    "fmt"
)

type Item struct {
    index int // 元素下标
    value int // 元素值
}

// 声名一个优先队列，java的优先队列就是用堆实现的
type PriorityQueue []*Item

// 实现heap接口的 Len,Less,Swap,Push,Pop 方法
func (pq PriorityQueue) Len() int {
    return len(pq)
}

// 比较器，当两者的值相同时，比较下标的位置
func (pq PriorityQueue) Less(i, j int) bool {
    if pq[i].value == pq[j].value {
        return pq[i].index > pq[j].index
    }
    return pq[i].value > pq[j].value
}

func (pq PriorityQueue) Swap(i, j int) {
    pq[i], pq[j] = pq[j], pq[i]
}

// Push、Pop不仅改变堆的值还改变堆长度，所以receiver用指针
func (pq *PriorityQueue) Push(x interface{}) {
    // n := len(*pq)
    item := x.(*Item)
    // item.index = n
    *pq = append(*pq, item)
}

func (pq *PriorityQueue) Pop() interface{} {
    old := *pq
    n := len(old)
    item := old[n-1]
    old[n-1] = nil // 避免内存泄露
    *pq = old[0 : n-1]
    return item
}

// 只查看堆顶元素，不更改堆的结构，此处是大顶堆所以第一个元素最大
func (pq PriorityQueue) peek() interface{} {
    return pq[0]
}

func maxSlidingWindow(nums []int, k int) []int {
    // 初始化前K的元素到堆中
    pq := make(PriorityQueue, k)
    for i := 0; i < k; i++ {
        pq[i] = &Item{index: i, value: nums[i]}
    }
    heap.Init(&pq)

    n := len(nums)
    // 总共有n-k+1个窗口，声名一个长度长度&容量n-k+1的slice
    ans := make([]int, n-k+1)
    // 堆顶元素即是第一个窗口最大值，先放进ans
    ans[0] = pq.peek().(*Item).value

    // 遍历将剩下的元素依次入堆
    for i := k; i < n; i++ {
        // 将新元素入堆
        item := &Item{index: i, value: nums[i]}
        heap.Push(&pq, item)
        // 循环判断当前堆顶是否在窗口中，一般思路是遍历窗口元素与堆顶进行对比，时间复杂度为O(k)
        // 反向思维：堆顶元素已经是最大值，可以依次pop比较堆顶元素的下标是否小于窗口的左边界i-k+1，直到堆为空或者堆顶元素下标等于左边界，出栈时间复杂度O(1)
        for pq.Len() > 0 && pq.peek().(*Item).index <= i-k {
            heap.Pop(&pq)
        }
        // 在窗口中直接赋值即可
        if pq.Len() > 0 {
            ans[i-k+1] = pq.peek().(*Item).value
        }
    }
    return ans
}
```

### 代码参考

- [github](https://github.com/beyondyyh/Leetcode/blob/master/algorithms/offer100/239.maxSlidingWindow.go)

