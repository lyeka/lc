### 解题思路

    递推公式：
              1). 如果word1[i] = word2[j] : dp[i][j] = dp[i-1][j-1]
              2). 如果word2[i] != word2[j]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
    时间复杂度：o(mxn) m:word1字符长度 n:word2字符长度
    空间复杂度：o(mxn) m:word1字符长度 n:word2字符长度 

### 代码

* golang

```golang
func minDistance(word1 string, word2 string) int {
    /*

      递推公式：
                1). 如果word1[i] = word2[j] : dp[i][j] = dp[i-1][j-1]
                2). 如果word2[i] != word2[j]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
      时间复杂度：o(mxn) m:word1字符长度 n:word2字符长度
      空间复杂度：o(mxn) m:word1字符长度 n:word2字符长度             
    */

    word1Len, word2Len := len(word1), len(word2)
    dp := make([][]int, word1Len+1)
    for i := range dp {
        dp[i] = make([]int, word2Len+1)
    }
    // 初始化第一行
    for i := 0; i<word2Len+1; i++ {
        dp[0][i] = i
    }
    // 初始化第一列
    for i := 0; i<word1Len+1; i++ {
        dp[i][0] = i
    }

    for i := 1; i<word1Len+1; i++ {
        for j := 1; j<word2Len+1; j++ {
            // 如果word[i-1] == word[j-1] 
            if word1[i-1] == word2[j-1] {
                dp[i][j] = dp[i-1][j-1]
            } else {
                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
            }
        }
    }
    return dp[word1Len][word2Len]
}

func min(a, b, c int) int {
    if a < b {
        if a < c {
            return a
        }
        return c
    }
    if b < c {
        return b
    }
    return c
}
```

