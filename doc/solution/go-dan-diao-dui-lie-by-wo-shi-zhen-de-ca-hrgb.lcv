### 解题思路

单调队列指元素有序的队列，并且新元素在队尾插入，如果发现前面的元素比新元素小，那么新元素就把他们挤走，直到遇到比他大的或到达队首。

这样做的原因是,单调队列本身是有序的，队列内的数都会出现在同一个滑动窗口内，假如现在队列是:
5  3    (k=3)
这时滑动窗口最大值是5，3要想成为滑动窗口最大值，则需要5出队且后面的数都比他小
后面又入队一个4，变成:
5 3 4
此时即使5出队，由于3后面还有一个4，3直到自己出队也不可能成为最大值了，所以这时就可以让4把3赶走，队列最终变成
5 4

由于窗口大小有限制，因此在队列中还要记录元素出现的下标，如果出现下标小于当前窗口的左侧下标，那么就不能再使用这个最大值了，需要把他出队

在本题的需要一开始读进窗口，建立好初始的单调队列，然后进行窗口的移动，把右边新读入的值入队，同时判断当前队首的值是否下标在窗口左边，是的话就要出队。
操作结束后每轮的队首就是滑动窗口最大值了。

Go语言里可以通过切片的性质很方便地实现队列，把上面的操作要求写成入队出队的方法就可以了

### 代码

* golang

```golang
func maxSlidingWindow(nums []int, k int) []int {
    res:=make([]int,len(nums)-k+1)
    i:=0
    queue:=make(monoQueue,0)



    for i=0;i<k;i++{
        queue.enqueue(pair{nums[i],i})
    }
    res[0]=queue[0].num  
    // fmt.Println(queue)
    for j:=1;i<len(nums);i,j=i+1,j+1{
       queue.enqueue(pair{nums[i],i})
       if(queue[0].index<j){
           queue.dequeue()
       }
    //    fmt.Println(queue)
       res[j]=queue[0].num
    }
    return res
}
type monoQueue []pair
type pair struct{
    num int
    index int
}
func (Q *monoQueue) enqueue(elem pair){//入队
    queue:=*Q
    i:=0
    for i=len(queue)-1;i>=0;i--{//找到插入位置
        if queue[i].num>elem.num{
            break
        }
    }
    i++
    if(i==len(queue)){//插入位置在尾部则需要append扩容
         *Q=append(queue, elem)
    }else{
        queue[i]=elem
        *Q=queue[:i+1]
    }
}
func (Q *monoQueue) dequeue(){//出队，把队首去掉就行了
    *Q=(*Q)[1:]
}

```

